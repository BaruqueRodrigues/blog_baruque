{
  "hash": "3e66f335e68f35b20b0d6f866bba473b",
  "result": {
    "markdown": "---\ntitle: \"Usando o Reduce - Tutorial\"\nauthor: \"Baruque Rodrigues\"\ndate: \"2024-06-16\"\ncategories: [tutorial, code, analysis]\nimage: \"image.jpg\"\n---\n\n\n## Tópicos sobre Programação Funcional\n\n#### Sobre o `reduce` e o `map`\n\nEm R, as funções **`reduce`** e **`map`** são utilizadas para manipular coleções de dados, como listas ou vetores, mas cada uma tem propósitos distintos e é adequada para diferentes tipos de operações. A ideia aqui é apresentar como utilizar essas o `reduce` para ganhar tempo e produtividade nas nossas rotinas de dados.\n\n#### O Uso do `reduce`\n\nA função **`reduce`** é parte do pacote {purrr} que faz parte do {tidyverse} e é usada para reduzir uma coleção de valores a um único valor. A operação de redução é realizada aplicando uma função que toma dois argumentos de entrada de cada vez, acumulando o resultado conforme percorre a coleção.\n\n\\\nNo exemplo abaixo vamos somar uma coleção de valores, existem algumas formas de fazer isso. A mais intuitiva é inserir os valores e o operador de soma.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n1+2+3+4+5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15\n```\n:::\n:::\n\n\nUsando o purrr::reduce eu posso fazer essa operação de forma mais simples, no primeiro argumento indico o vetor de elementos que receberá a função, e no segundo a função que será executada acumulando o resultado enquanto percorre o vetor.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1+2+3+4+5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15\n```\n:::\n:::\n\n\n\n**Quando usar:**\n\n-   Quando você precisa combinar elementos de uma lista ou vetor em um único resultado com base em uma operação específica.\n\n-   Operações comuns incluem a soma de números, a multiplicação de elementos ou a combinação de estruturas de dados mais complexas de uma maneira específica.\n\n### Exemplo Prático - Total de Vendas Mensais por Lojas\n\nImagine que você está trabalhando com dados de vendas mensais de várias lojas e quer calcular o total de vendas anuais combinadas de todas as lojas. Aqui, cada coluna são vendas mensais de uma loja, e você quer somar todas as vendas de todos os meses de todas as lojas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble_vendas <- dplyr::tibble(\n  mes = 1:6,\n  vendas_loja_1 = c(12000, 13000, 11000, 14000, 15000, 14500),\n  vendas_loja_2 = c(11500, 12000, 13000, 13500, 14000, 12500),\n  vendas_loja_3 = c(13000, 13500, 14000, 14500, 15000, 15500))\n```\n:::\n\n\nExistem multiplas formas de executar essa tarefa, todavia por critérios pedagógicos, vamos fazer utilizando o {tidyverse}. Na primeira abordagem vamos fazer a soma sem utilizar o reduce e na segunda vamos utilizá-lo, assim podemos comparar os resultados e o quão difícil é implementá-lo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble_vendas %>% \n  mutate(\n    # Sem o reduce só executamos a soma indicando as colunas\n    total_vendas = vendas_loja_1 + vendas_loja_2 + vendas_loja_3,\n    # No reduce precisamos indicar que queremos remover a coluna mes\n    # para que ela não seja inserida no calculo\n    total_vendas_via_reduce = reduce(tibble_vendas %>%\n                                     select(-mes), `+`)\n         )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n    mes vendas_loja_1 vendas_loja_2 vendas_loja_3 total_vendas\n  <int>         <dbl>         <dbl>         <dbl>        <dbl>\n1     1         12000         11500         13000        36500\n2     2         13000         12000         13500        38500\n3     3         11000         13000         14000        38000\n4     4         14000         13500         14500        42000\n5     5         15000         14000         15000        44000\n6     6         14500         12500         15500        42500\n# ℹ 1 more variable: total_vendas_via_reduce <dbl>\n```\n:::\n:::\n\n\nSem o reduce só executamos a soma indicando as colunas já no reduce precisamos indicar que queremos remover a coluna mes para que ela não seja inserida no cálculo. Em uma primeira vista fazer uso do reduce, ou aprender ele não faz sentido já que é mais viável inserir os calculos na mão, correto? Vendo o exemplo acima, tenho que concordar com você, é melhor indicar manualmente as colunas do que aprender o uso de uma nova função.\n\nPreparei o Exemplo abaixo pra tentar te fazer mudar de ideia\n\n\n::: {.cell}\n\n:::\n\n\nNo dataset com muitas lojas as vendas de 6 meses para 365 lojas, nesse caso calculas o total de vendas sem utilizar o reduce é humanamente impossível.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset_com_muitas_lojas \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 366\n    mes vendas_loja_1 vendas_loja_2 vendas_loja_3 vendas_loja_4 vendas_loja_5\n  <int>         <dbl>         <dbl>         <dbl>         <dbl>         <dbl>\n1     1        11448.        13791.        14130.        13106.        12512.\n2     2        11338.        11365.        14568.        10443.        13462.\n3     3        12036.        11410.        14560.        11128.        13037.\n4     4        11113.        14415.        11333.        13028.        11249.\n5     5        11814.        12721.        13109.        13898.        10909.\n6     6        13351.        11659.        12262.        13144.        13488.\n# ℹ 360 more variables: vendas_loja_6 <dbl>, vendas_loja_7 <dbl>,\n#   vendas_loja_8 <dbl>, vendas_loja_9 <dbl>, vendas_loja_10 <dbl>,\n#   vendas_loja_11 <dbl>, vendas_loja_12 <dbl>, vendas_loja_13 <dbl>,\n#   vendas_loja_14 <dbl>, vendas_loja_15 <dbl>, vendas_loja_16 <dbl>,\n#   vendas_loja_17 <dbl>, vendas_loja_18 <dbl>, vendas_loja_19 <dbl>,\n#   vendas_loja_20 <dbl>, vendas_loja_21 <dbl>, vendas_loja_22 <dbl>,\n#   vendas_loja_23 <dbl>, vendas_loja_24 <dbl>, vendas_loja_25 <dbl>, …\n```\n:::\n:::\n\n\nPor mais que aprender funções novas seja complicado, por te fazer gastar tempo que você poderia estar alocando em resolver problemas, ele se paga em pouquíssimo tempo, já que o ganho que produtividade vai ser cumulativo pro resto da sua vida.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset_com_muitas_lojas %>% \n  reframe(\n   # total_vendas = vendas_loja_1 + vendas_loja_2 + vendas_loja_3,\n    total_vendas_via_reduce = reduce(dataset_com_muitas_lojas %>%\n                                     select(-mes), `+`)\n         )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 1\n  total_vendas_via_reduce\n                    <dbl>\n1                4581447.\n2                4559736.\n3                4579527.\n4                4523289.\n5                4545922.\n6                4547279.\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}